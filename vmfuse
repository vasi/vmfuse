#!/usr/bin/ruby
require 'fileutils'
require 'open3'
require 'socket'
require 'timeout'

class VM
	VMHost = 'localhost'
	SSHPort = 22
	SSHUserHost = 'root@' + VMHost
	
	SSHPF = 'vmfuse'		# Name of port forwarding rule
	VMMountPoint = 'mnt'	# Mount point inside the guest
	VMGroup = '/vmfuse'		# VM group to put a new VM in
	VMDiskName = 'part'		# Name of the virtual disk to create
	
	attr_reader :name, :port
	
	
	# Try something again and again until it succeeds, or we run out of time
	SleepInterval = 1
	SleepMax = 30
	def self.try_sleeping
		Timeout.timeout(SleepMax) do
			loop do
				yield and return
				sleep SleepInterval
			end
		end
	end
	
	# Run a command in the background, and let another process track its status.
	# Returns an object `bg` such that bg.wait will return only once the background
	# process is done. This works even if the eventual process that calls wait is not
	# related to the background process.
	BackgroundWaiter = Struct.new(:fd) { def wait; fd.read; end }
	def self.background
		r, w = IO.pipe
		
		fork do
			r.close
			yield
			w.close # alert the other process
		end
		
		w.close
		return BackgroundWaiter.new(r)
	end
	
	
	# Run a command, optionally modifying the environment.
	# Returns stdout. Suppresses stderr except in case of error.
	def self.cmd(cmd, env: {})
		out, err, status = Open3.capture3(env, *cmd)
		unless status.success?
			$stderr.print err
			raise 'Error executing %s' % cmd.join(' ')
		end
		return out
	end
	
	def manage(*args)
		# TODO: Use VBOX_USER_HOME
		self.class.cmd(['VBoxManage', *args])
	end

	# Get names of all existing VMs
	def all_vms
		manage('list', 'vms').scan(/^"(.*)" \{[-\h]+\}/)
	end
	
	
	# Common options for SSH-related commands.
	def ssh_opts
		# Don't prompt user to check host identity
		['-o', 'NoHostAuthenticationForLocalhost=yes', '-p', @port.to_s]
	end
	
	# Run a command on the VM via SSH.
	def ssh(*args)
		self.class.cmd(['ssh', *ssh_opts, SSHUserHost, *args])
	end
	
	# Mount the VM's vended directory onto `mountpoint`.
	# Returns only on error, or when unmounted.
	def sshfs(mountpoint)
		# -f: Foreground
		remote = SSHUserHost + ':' + VMMountPoint
		self.class.cmd(['sshfs', *ssh_opts, '-f', remote, mountpoint])
	end
	
	
	# Choose a name for the temporary VM
	NameSuffixLength = 10
	NameSuffixBase = 36
	def choose_name(base)
		loop do
			name = base + '-' + rand(NameSuffixBase ** NameSuffixLength).
				to_s(NameSuffixBase)
			# Short race condition between name choice and creation
			return name unless all_vms.include? name
		end
	end
	
	# Choose an unused port to access the VM via SSH
	PortUser = 1024..65535
	PortConnectTimeout = 1
	def choose_port
		loop do
			begin
				port = rand(PortUser)
				Timeout::timeout(PortConnectTimeout) do
					TCPSocket.new(VMHost, port)
				end
				# It's in use, loop again
			rescue Timeout::Error, Errno::ECONNREFUSED, Errno::EHOSTUNREACH
				return port # We found an unused port!
			end
		end
	end
	
	
	# Clone the VM from the base
	def clone(base_vm, base_snapshot, new_name)
		manage('clonevm', base_vm, '--snapshot', base_snapshot,
			'--groups', VMGroup, '--name', new_name,
			'--options', 'link', '--register')
		@name = new_name
	end
	
	# Find the directory where the VM's files are stored.
	# Usually something like "~/VirtualBox VMs".
	def basedir
		info = manage('showvminfo', '--machinereadable', @name)
		config = info[/^CfgFile=\"(.*)\"$/, 1] \
			or raise "Can't determine VM directory"
		File.dirname(config)
	end
	
	# Forward a port on the host to SSH on the guest
	def port_forward(host_port)
		pf_desc = '%s,tcp,,%s,,%s' % [SSHPF, host_port, SSHPort]
		manage('modifyvm', @name, '--natpf1', pf_desc)
		@port = host_port
	end
	
	# Attach a disk to the VM
	def attach_disk(path)
		manage('storageattach', @name, '--storagectl', 'SATA', '--port', '1',
			'--type', 'hdd', '--medium', path)
	end
	
	# Create a virtual disk that references a raw partition
	def create_raw_disk(name, disk, partition)
		# TODO: Do something better about root privileges
		path = File.join(basedir, '%s.vmdk' % name)
		
		system('sudo', 'VBoxManage', 'internalcommands', 'createrawvmdk',
			'-filename', path, '-rawdisk', disk,
			'-partitions', partition.to_s) \
			or raise "Failure creating raw disk"
		
		# Ensure we can access the partition as non-root
		uid = Process.uid.to_s
		system('sudo', 'chown', '-R', uid, basedir.to_s)
		# TODO: This only works on OS X
		system('sudo', 'chown', uid, disk + 's' + partition.to_s)
		
		return path
	end
	
	# Start the virtual machine
	def guest_start
		manage('startvm', @name, '--type', 'headless')
	end
	def guest_stop
		ssh('poweroff')
	end	
	
	# Mount a device in the guest
	def guest_mount(guest_device, type = nil)
		type_args = type ? ['-t', type] : []
		ssh('mount', *type_args, guest_device, VMMountPoint)
	end
	def guest_unmount
		ssh('umount', VMMountPoint)
	end
	
	# Delete this virtual machine
	def delete
		# Sleep until VM is powered off
		self.class.try_sleeping do
			manage('unregistervm', @name, '--delete') rescue false
		end
	end
	
	# Mount in the background, only return once the mount is done.
	def mount_wait(mountpoint)
		# When mount succeeds, device of mountpoint will differ
		dev = ->{ File.stat(mountpoint).dev }
		orig_dev = dev[]
		
		bg = self.class.background { sshfs(mountpoint) }	
		
		self.class.try_sleeping { dev[] != orig_dev }
		return bg
	end
	
	
	# Create a new, minimally configured clone VM
	def initialize(base_vm, base_snapshot)
		clone(base_vm, base_snapshot, choose_name(base_vm))
		port_forward(choose_port)
	end
	
	# Add a raw disk to the VM
	def attach_raw_disk(disk, part)
		vdisk = create_raw_disk(VMDiskName, disk, part)
		attach_disk(vdisk)
	end
	
	# Do everything required to clean up once sshfs exits 
	def cleanup
		guest_unmount
		guest_stop
		delete
	end
	
	# Mount the raw disk on the host, daemonize, and cleanup on unmount
	def mount(guest_device, type, mountpoint)
		guest_start
		guest_mount(guest_device, type)
		bg = mount_wait(mountpoint)
		
		Process.daemon
		bg.wait
		cleanup
	end
end

disk, part_number, guest_device, type, mountpoint = *ARGV

vm = VM.new('vmfuse', 'vmfuse')
vm.attach_raw_disk(disk, part_number.to_i)
vm.mount(guest_device, type, mountpoint)
